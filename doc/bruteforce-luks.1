.TH BRUTEFORCE-LUKS "1" "March 2024" "BRUTEFORCE-LUKS 1.4.1" "Bruteforce LUKS encrypted volume"
.SH NAME
bruteforce-luks - try to find the password of a LUKS volume
.SH SYNOPSIS
.B bruteforce-luks [options]
.I <path to LUKS volume>
.SH DESCRIPTION
The purpose of this program is to try to find the password of a LUKS
encrypted volume.
.P
It can be used in two ways:
.RS
.P
\(bu brute force attack: try all the possible passwords given a character set.
It is especially useful if you know something about the password (i.e. you
forgot a part of your password but still remember most of it). Finding the
password of a volume without knowing anything about it would take way too much
time (unless the password is really short and/or weak).
.P
\(bu dictionary attack: try all the passwords in a file.
.RE
.P
The program can use several threads (the number of threads can be specified
with the
.I -t
command line option).
.P
Sending a USR1 signal to a running
.B bruteforce-luks
process makes it print progress info to standard error and continue.
.SH OPTIONS
.nf
.TP
.B -b <string>
Beginning of the password.
Default: ""
.TP
.B -e <string>
End of the password.
Default: ""
.TP
.B -f <file>
Read the passwords from a file instead of generating them.
.TP
.B -h
Show help and quit.
.TP
.B -l <length>
Minimum password length (beginning and end included).
Default: 1
.TP
.B -m <length>
Maximum password length (beginning and end included).
Default: 8
.TP
.B -s <string>
Password character set.
Default: "0123456789ABCDEFGHIJKLMNOPQRSTU
          VWXYZabcdefghijklmnopqrstuvwxyz"
.TP
.B -t <n>
Number of threads to use.
Default: 1
.TP
.B -v <n>
Print progress info every n seconds.
.TP
.B -w <file>
Restore the state of a previous session if the file exists,
then write the state to the file regularly (~ every minute).
.SH EXAMPLES
Try to find the password of a LUKS encrypted volume using 4 threads, trying
only passwords with 5 characters:
.sp
.nf
    bruteforce-luks -t 4 -l 5 -m 5 /dev/sdb1
.P
.fi
Try to find the password of a LUKS encrypted volume using 8 threads, trying
only passwords with 5 to 10 characters beginning with "W4l" and ending with "z":
.sp
.nf
    bruteforce-luks -t 8 -l 5 -m 10 -b "W4l" -e "z" /dev/sda2
.P
.fi
Try to find the password of a LUKS encrypted volume using 8 threads, trying
only passwords with 10 characters using the character set "P情8ŭ":
.sp
.nf
    bruteforce-luks -t 8 -l 10 -m 10 -s "P情8ŭ" /dev/sdc3
.P
.fi
Try to find the password of a LUKS encrypted volume using 6 threads, trying
the passwords contained in a dictionary file:
.sp
.nf
    bruteforce-luks -t 6 -f dictionary.txt /dev/sdd1
.P
.fi
Instead of passing a block device to the program, you can copy the beginning
of the LUKS volume to a file and pass this file to the program:
.sp
.nf
    sudo cryptsetup luksHeaderBackup --header-backup-file /tmp/luks-header /dev/sda1
    sudo chown $USER /tmp/luks-header
    bruteforce-luks -t 4 -l 5 -m 5 /tmp/luks-header
.P
.fi
Print progress info:
.sp
.nf
    pkill -USR1 -f bruteforce-luks
.P
.fi
Print progress info every 30 seconds:
.sp
.nf
    bruteforce-luks -t 6 -f dictionary.txt -v 30 /dev/sdd1
.P
.fi
Save/restore state between sessions:
.sp
.nf
    bruteforce-luks -t 6 -f dictionary.txt -w state.txt /dev/sdd1
      (Let the program run for a few minutes and stop it)
    bruteforce-luks -t 6 -w state.txt /dev/sdd1
